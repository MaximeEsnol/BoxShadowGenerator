{"version":3,"sources":["logo.svg","components/Header.js","components/Content.js","components/Slider.js","components/Toggle.js","components/ColorPicker.js","components/Sliders.js","utils/shadow.js","components/Box.js","components/Code.js","components/ShadowLayer.js","components/ShadowList.js","components/HomeScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","Content","children","Slider","state","currentValue","handleChange","event","stopPropagation","setState","target","value","handler","uniqueId","uniqid","this","defaultValue","htmlFor","label","type","id","onChange","min","max","Component","defaultProps","Toggle","toggled","disabledText","checked","enabledText","React","ColorPicker","defaultColor","formatted","useRef","r","g","b","a","useState","opened","setOpened","rgb","color","setColor","togglePicker","onClick","style","backgroundColor","current","formattedColor","bind","Sliders","inset","offsetX","offsetY","blurRadius","spreadRadius","shadowIndex","boxColor","boxSize","model","_callHandlerProp","handleColor","onChangeValues","getBoxShadowFromObject","shadows","boxShadow","forEach","shadow","index","length","Box","boxShadows","transform","Code","ShadowLayer","order","ShadowList","HomeScreen","currentShadowIndex","verifyValidShadowIndex","newIndex","updateCurrentShadow","newShadow","targetShadow","handleShadowValues","values","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.0d8c932d.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './../css/header.css';\r\n\r\nconst Header = props => {\r\n    return (\r\n        <header>\r\n            <h1>\r\n                <span className=\"box\">Box</span> Shadow Generator\r\n            </h1>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport './../css/content.css';\r\n\r\nconst Content = props => {\r\n    \r\n    return (\r\n        <div className=\"content\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Content;","import React, { Component } from 'react';\r\nimport uniqid from 'uniqid';\r\nimport './../css/slider.css';\r\nimport PropTypes from 'prop-types';\r\n\r\n/**\r\n * Represents a stylized input with type \"range\". \r\n */\r\nclass Slider extends Component {\r\n    state = {\r\n        currentValue: 0\r\n    }\r\n\r\n    static propTypes = {\r\n        /** The minimum value. Default: -100 */\r\n        min: PropTypes.number,\r\n        /** The maximum value. Default: 100 */\r\n        max: PropTypes.number,\r\n        /** The default value. Default: 0 */\r\n        defaultValue: PropTypes.number,\r\n        /** A function that handles the slider value. */\r\n        handler: PropTypes.func,\r\n        /** A label to shortly describe the slider. Default: \"Slider\" */\r\n        label: PropTypes.string\r\n    }\r\n\r\n    static defaultProps = {\r\n        min: -100,\r\n        max: 100,\r\n        defaultValue: 0,\r\n        label: \"Slider\"\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState({currentValue: this.props.defaultValue});\r\n    }\r\n\r\n    constructor( props ) {\r\n        super();\r\n        this.props = props;\r\n        this.uniqueId = uniqid();\r\n    }\r\n\r\n    handleChange = ( event ) => {\r\n        event.stopPropagation();\r\n        this.setState( { currentValue: event.target.value } );\r\n        this.props.handler( event.target.value );\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"input-field slider\">\r\n                <div className=\"user-information\">\r\n                    <label htmlFor={this.uniqueId}>\r\n                        { this.props.label }\r\n                    </label>\r\n\r\n                    <input type=\"number\" \r\n                    id={this.uniqueId}\r\n                    value={this.state.currentValue} \r\n                    onChange={ event => this.handleChange( event ) }/>\r\n                </div>\r\n                \r\n                <input type=\"range\" \r\n                min={this.props.min}\r\n                max={this.props.max} \r\n                value={this.state.currentValue}\r\n                onChange={ event => this.handleChange( event ) }/>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Slider;","import React from 'react';\r\nimport uniqid from 'uniqid';\r\nimport PropTypes from 'prop-types';\r\nimport './../css/toggle.css';\r\n\r\nclass Toggle extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.uniqueId = uniqid();\r\n    }\r\n\r\n    static propTypes = {\r\n        /** A label to shortly described what is being toggled. Default: \"Toggle\" */\r\n        label: PropTypes.string,\r\n        /** Text to appear on the off/disabled side of the toggle. Default: null */\r\n        disabledText: PropTypes.string,\r\n        /** Text to appear on the on/enabled side of the toggle. Default: null */\r\n        enabledText: PropTypes.string,\r\n        /** A function to handle the changes in value of the toggle. */\r\n        handler: PropTypes.func\r\n    };\r\n\r\n    static defaultProps = {\r\n        label: \"Toggle\"\r\n    };\r\n\r\n    state = {\r\n        toggled: false\r\n    };\r\n\r\n    handleChange = () => {\r\n        this.setState({ toggled: !this.state.toggled });\r\n        this.props.handler( );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input-field toggle\">\r\n                <label htmlFor={this.uniqueId}>\r\n                    {this.props.label}\r\n                </label>\r\n                {\r\n                    this.props.disabledText &&\r\n                    <p>\r\n                        {this.props.disabledText}\r\n                    </p>\r\n                }\r\n                <input type=\"checkbox\"\r\n                    checked={this.state.toggled}\r\n                    onChange={ this.handleChange }\r\n                    id={this.uniqueId} />\r\n                {\r\n                    this.props.enabledText &&\r\n                    <p>\r\n                        {this.props.enabledText}\r\n                    </p>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Toggle;","import React, { useRef, useState } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ChromePicker } from 'react-color';\r\nimport './../css/color-picker.css';\r\n\r\nconst ColorPicker = ({ label, handler, defaultColor }) => {\r\n    const formatted = useRef(\"rgba(\" + defaultColor.r + \", \" + defaultColor.g + \", \" + defaultColor.b + \", \" + defaultColor.a + \")\");\r\n    const [opened, setOpened] = useState(false);\r\n    const [color, setColor] = useState( {rgb: defaultColor });\r\n\r\n    const handleColor = color => {\r\n        setColor(color.rgb);\r\n\r\n        let formattedColor = \"rgba(\";\r\n        formattedColor += color.rgb.r + \", \" + color.rgb.g + \", \" + color.rgb.b + \", \" + color.rgb.a + \")\";\r\n\r\n        formatted.current = formattedColor;\r\n\r\n        handler(formatted.current );\r\n    };\r\n\r\n    const togglePicker = () => {\r\n        setOpened(!opened);\r\n    };\r\n\r\n\r\n    return (\r\n        <div className=\"input-field color-picker\">\r\n            <label onClick={togglePicker}>\r\n                {label}\r\n            </label>\r\n            <div className=\"color-preview\" style={{ backgroundColor: formatted.current }}\r\n                onClick={togglePicker}>\r\n\r\n            </div>\r\n\r\n            {opened &&\r\n                <div className=\"picker-popover\">\r\n                    <div className=\"picker-cover\" onClick={togglePicker} />\r\n                    <ChromePicker color={color}\r\n                        onChange={handleColor.bind(this)} />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nColorPicker.propTypes = {\r\n    /** A label to show for the color picker. Default: \"Color\" */\r\n    label: PropTypes.string,\r\n    /** A handler function to lift up the color state of the color picker. Required. */\r\n    handler: PropTypes.func.isRequired,\r\n    /** The default color to set the color picker to. */\r\n    defaultColor: PropTypes.object\r\n};\r\n\r\nColorPicker.defaultProps = {\r\n    label: \"Color\",\r\n    defaultColor: { r: 0, g: 0, b: 0, a: 1 }\r\n};\r\n\r\nexport default ColorPicker;","import React from 'react';\r\nimport Slider from './Slider';\r\nimport Toggle from './Toggle';\r\nimport './../css/sliders.css';\r\nimport ColorPicker from './ColorPicker';\r\n\r\nclass Sliders extends React.Component {\r\n\r\n    state = {\r\n        inset: false,\r\n        offsetX: 0,\r\n        offsetY: 2,\r\n        blurRadius: 5,\r\n        spreadRadius: 2,\r\n        color: \"rgba(0,0,0,0.40)\",\r\n        shadowIndex: 0,\r\n        boxColor: \"rgba(240, 240, 240, 1)\",\r\n        backgroundColor: \"rgba(255, 255, 255, 1)\",\r\n        boxSize: 100\r\n    }\r\n\r\n    handler = (model, value) => {\r\n        this.setState({ [model]: value }, this._callHandlerProp);\r\n    }\r\n\r\n    handleColor = color => {\r\n        this.setState({ color: color }, this._callHandlerProp);\r\n    }\r\n\r\n    _callHandlerProp = () => {\r\n        this.props.onChangeValues( this.state );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"sliders\">\r\n                <Toggle label=\"Outset / Inset\"\r\n                    handler={this.handler.bind(this, \"inset\", !this.state.inset)}\r\n                    enabledText=\"Inset\"\r\n                    disabledText=\"Outset\" />\r\n                <Slider label=\"Horizontal Offset\" handler={this.handler.bind(this, \"offsetX\")} defaultValue={0}/>\r\n                <Slider label=\"Vertical Offset\" handler={this.handler.bind(this, \"offsetY\")} defaultValue={2}/>\r\n                <Slider label=\"Blur Radius\" handler={this.handler.bind(this, \"blurRadius\")} min={0} defaultValue={5} />\r\n                <Slider label=\"Spread Radius\" handler={this.handler.bind(this, \"spreadRadius\")} defaultValue={2} />\r\n\r\n                <ColorPicker label=\"Shadow Color\" handler={this.handleColor.bind(this)}\r\n                defaultColor={{r: 0, g: 0, b: 0, a: 0.40}}/>\r\n\r\n                <ColorPicker label=\"Box Color\" \r\n                handler={this.handler.bind(this, \"boxColor\")}\r\n                defaultColor={ {r: 240, g: 240, b: 240, a: 1} } />\r\n\r\n                <ColorPicker label=\"Background Color\" \r\n                handler={this.handler.bind(this, \"backgroundColor\")}\r\n                defaultColor={ {r: 255, g: 255, b: 255, a: 1} } />\r\n\r\n                <Slider label=\"Box Size\" \r\n                handler={this.handler.bind(this, \"boxSize\")} \r\n                min={0} \r\n                max={150} \r\n                defaultValue={100}/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Sliders;","export const getBoxShadowFromObject = shadows => {\r\n    let boxShadow = \"\";\r\n\r\n    shadows.forEach( ( shadow, index ) => {\r\n        boxShadow += ( shadow.inset ) ? \"inset \" : \"\";\r\n        boxShadow += shadow.offsetX + \"px \";\r\n        boxShadow += shadow.offsetY + \"px \";\r\n        boxShadow += shadow.blurRadius + \"px \";\r\n        boxShadow += shadow.spreadRadius + \"px \";\r\n        boxShadow += shadow.color;\r\n        boxShadow += ( index + 1 < shadows.length ) ? \",\" : \"\"\r\n    } );\r\n\r\n    return boxShadow;\r\n}","import React from 'react';\r\nimport { getBoxShadowFromObject } from './../utils/shadow';\r\nimport './../css/box.css';\r\n\r\nconst Box = props => {\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"shadow-box-container\" style={{backgroundColor: props.backgroundColor}}>\r\n            <div className=\"shadow-box\" \r\n            style={\r\n                {\r\n                    boxShadow: getBoxShadowFromObject( props.boxShadows ), \r\n                    backgroundColor: props.boxColor,\r\n                    transform: 'scale(' + props.boxSize/100 + ')'\r\n                }\r\n            }>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Box;","import React from 'react';\r\nimport { getBoxShadowFromObject } from './../utils/shadow';\r\n\r\nconst Code = props => {\r\n\r\n    return (\r\n        <div className=\"code\">\r\n            <code>\r\n                box-shadow: { getBoxShadowFromObject( props.shadows ) };\r\n            </code>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Code;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst ShadowLayer = props => {\r\n\r\n    return (\r\n        <div className=\"shadow-layer\">\r\n            <p>\r\n                {props.order}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nShadowLayer.propTypes = {\r\n    /** The order number of this item in the full list. */\r\n    order: PropTypes.number.isRequired,\r\n    /** The singular shadow object for this item. */\r\n    shadow: PropTypes.object.isRequired\r\n};\r\n\r\nexport default ShadowLayer;","import React from 'react';\r\nimport ShadowLayer from './ShadowLayer';\r\n\r\nconst ShadowList = props => {\r\n\r\n    return (\r\n        <div className=\"shadow-list\">\r\n            {\r\n                props.shadows.forEach( ( shadow, index ) => \r\n                    <ShadowLayer order={index} shadow={shadow}/>\r\n                )\r\n            }\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ShadowList;","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport Content from './Content';\r\nimport Sliders from './Sliders';\r\nimport Box from './Box';\r\nimport Code from './Code';\r\nimport './../css/homescreen.css';\r\nimport ShadowList from './ShadowList';\r\n\r\nclass HomeScreen extends Component {\r\n\r\n    state = {\r\n        currentShadowIndex: 0,\r\n        boxShadows: [],\r\n        backgroundColor: \"rgba(255, 255, 255, 1)\",\r\n        boxColor: \"rgba(240, 240, 240, 1)\",\r\n        boxSize: 100\r\n    }\r\n\r\n    verifyValidShadowIndex = () => {\r\n        if ( this.state.boxShadows.length <= this.state.currentShadowIndex ) {\r\n            let newIndex = this.state.boxShadows.length;\r\n            \r\n            this.setState( {\r\n                boxShadows: [...this.state.boxShadows, {}],\r\n                currentShadowIndex: newIndex\r\n            } );\r\n        }\r\n    }\r\n\r\n    updateCurrentShadow = newShadow => {\r\n        let shadows = [...this.state.boxShadows];\r\n        let targetShadow = [shadows[ this.state.currentShadowIndex ]];\r\n        targetShadow = newShadow;\r\n        shadows[ this.state.currentShadowIndex ] = targetShadow;\r\n\r\n        return shadows;\r\n    }\r\n\r\n    handleShadowValues = values => {\r\n\r\n        this.verifyValidShadowIndex();\r\n\r\n        let shadow = {\r\n            inset: values.inset,\r\n            offsetX: values.offsetX,\r\n            offsetY: values.offsetY,\r\n            blurRadius: values.blurRadius,\r\n            spreadRadius: values.spreadRadius,\r\n            color: values.color\r\n        };\r\n\r\n        this.setState({\r\n            boxShadows: this.updateCurrentShadow( shadow ), \r\n            backgroundColor: values.backgroundColor, \r\n            boxColor: values.boxColor,\r\n            boxSize: values.boxSize\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <Header/>\r\n                <Content>\r\n                    <Sliders onChangeValues={this.handleShadowValues.bind(this)} />\r\n                    <Box backgroundColor={this.state.backgroundColor} \r\n                    boxColor={this.state.boxColor} \r\n                    boxShadows={this.state.boxShadows}\r\n                    boxSize={this.state.boxSize}/>\r\n                    <ShadowList shadows={this.state.boxShadows}\r\n                    current={this.state.currentShadowIndex}/>\r\n                </Content>\r\n\r\n                \r\n                <Code shadows={this.state.boxShadows}/>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default HomeScreen;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport HomeScreen from './components/HomeScreen';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomeScreen/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}