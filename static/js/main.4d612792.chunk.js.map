{"version":3,"sources":["logo.svg","components/Header.js","components/Content.js","components/Slider.js","components/Toggle.js","utils/shadow.js","components/ColorPicker.js","components/Sliders.js","components/Box.js","components/Code.js","components/ShadowLayer.js","components/ShadowList.js","components/HomeScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","Content","children","Slider","min","max","defaultValue","handler","label","uniqueId","useRef","uniqid","current","useState","currentValue","setCurrentValue","useEffect","handleChange","event","stopPropagation","updateValue","target","value","newValue","numberValue","parseInt","htmlFor","type","id","onChange","defaultProps","Toggle","state","toggled","setState","this","disabledText","checked","enabledText","React","Component","getBoxShadowFromObject","shadows","boxShadow","forEach","shadow","index","inset","offsetX","offsetY","blurRadius","spreadRadius","color","length","stringToRgbObject","rgb","substring","indexOf","split","Error","r","g","b","a","DEFAULT_SHADOW","ColorPicker","defaultColor","formatted","opened","setOpened","setColor","togglePicker","formatColor","localColor","formattedColor","onClick","style","backgroundColor","bind","Sliders","shadowIndex","boxColor","boxSize","model","_callHandlerProp","handleColor","onChangeValues","prevProps","defaultShadow","Box","boxShadows","width","height","Code","icon","faChevronUp","ShadowLayer","isActive","onClickLayer","order","onClickDelete","faTimes","ShadowList","map","key","addShadowHandler","faPlus","HomeScreen","currentShadowIndex","defaultSelection","verifyValidShadowIndex","newIndex","updateCurrentShadow","newShadow","targetShadow","handleShadowValues","values","handleAddShadow","lastShadow","handleSelectLayer","layerIndex","handleDeleteLayer","splice","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.4d612792.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './../css/header.css';\r\n\r\nconst Header = props => {\r\n    return (\r\n        <header>\r\n            <h1>\r\n                <span className=\"box\">Box</span> Shadow Generator\r\n            </h1>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport './../css/content.css';\r\n\r\nconst Content = props => {\r\n    \r\n    return (\r\n        <div className=\"content\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Content;","import React, { useRef, useEffect, useState } from 'react';\r\nimport uniqid from 'uniqid';\r\nimport './../css/slider.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Slider = ( {min, max, defaultValue, handler, label} ) => {\r\n    const uniqueId = useRef(uniqid()).current;\r\n    const [currentValue, setCurrentValue] = useState(defaultValue);\r\n\r\n    useEffect( () => {\r\n        setCurrentValue( defaultValue );\r\n    }, [defaultValue]);\r\n\r\n    const handleChange = event => {\r\n        event.stopPropagation();\r\n        \r\n        updateValue( event.target.value );\r\n    }\r\n\r\n    const updateValue = newValue => {\r\n        let numberValue = parseInt( newValue );\r\n        setCurrentValue( numberValue );\r\n        handler( numberValue );\r\n    }\r\n\r\n    return (\r\n        <div className=\"input-field slider\">\r\n            <div className=\"user-information\">\r\n                <label htmlFor={uniqueId}>\r\n                    {label}\r\n                </label>\r\n\r\n                <input type=\"number\"\r\n                    id={uniqueId}\r\n                    value={currentValue}\r\n                    onChange={event => handleChange(event)} />\r\n            </div>\r\n\r\n            <input type=\"range\"\r\n                min={min}\r\n                max={max}\r\n                value={currentValue}\r\n                onChange={event => handleChange(event)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nSlider.propTypes = {\r\n    /** The minimum value. Default: -100 */\r\n    min: PropTypes.number,\r\n    /** The maximum value. Default: 100 */\r\n    max: PropTypes.number,\r\n    /** The default value. Default: 0 */\r\n    defaultValue: PropTypes.number,\r\n    /** A function that handles the slider value. */\r\n    handler: PropTypes.func,\r\n    /** A label to shortly describe the slider. Default: \"Slider\" */\r\n    label: PropTypes.string\r\n}\r\n\r\nSlider.defaultProps = {\r\n    min: -100,\r\n    max: 100,\r\n    defaultValue: 0,\r\n    label: \"Slider\"\r\n}\r\n\r\nexport default Slider;","import React from 'react';\r\nimport uniqid from 'uniqid';\r\nimport PropTypes from 'prop-types';\r\nimport './../css/toggle.css';\r\n\r\nclass Toggle extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.uniqueId = uniqid();\r\n    }\r\n\r\n    static propTypes = {\r\n        /** A label to shortly described what is being toggled. Default: \"Toggle\" */\r\n        label: PropTypes.string,\r\n        /** Text to appear on the off/disabled side of the toggle. Default: null */\r\n        disabledText: PropTypes.string,\r\n        /** Text to appear on the on/enabled side of the toggle. Default: null */\r\n        enabledText: PropTypes.string,\r\n        /** A function to handle the changes in value of the toggle. */\r\n        handler: PropTypes.func\r\n    };\r\n\r\n    static defaultProps = {\r\n        label: \"Toggle\"\r\n    };\r\n\r\n    state = {\r\n        toggled: false\r\n    };\r\n\r\n    handleChange = () => {\r\n        this.setState({ toggled: !this.state.toggled });\r\n        this.props.handler( );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input-field toggle\">\r\n                <label htmlFor={this.uniqueId}>\r\n                    {this.props.label}\r\n                </label>\r\n                {\r\n                    this.props.disabledText &&\r\n                    <p>\r\n                        {this.props.disabledText}\r\n                    </p>\r\n                }\r\n                <input type=\"checkbox\"\r\n                    checked={this.state.toggled}\r\n                    onChange={ this.handleChange }\r\n                    id={this.uniqueId} />\r\n                {\r\n                    this.props.enabledText &&\r\n                    <p>\r\n                        {this.props.enabledText}\r\n                    </p>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Toggle;","export const getBoxShadowFromObject = shadows => {\r\n    let boxShadow = \"\";\r\n\r\n    shadows.forEach( ( shadow, index ) => {\r\n        boxShadow += ( shadow.inset ) ? \"inset \" : \"\";\r\n        boxShadow += shadow.offsetX + \"px \";\r\n        boxShadow += shadow.offsetY + \"px \";\r\n        boxShadow += shadow.blurRadius + \"px \";\r\n        boxShadow += shadow.spreadRadius + \"px \";\r\n        boxShadow += shadow.color;\r\n        boxShadow += ( index + 1 < shadows.length ) ? \",\" : \"\"\r\n    } );\r\n\r\n    return boxShadow;\r\n}\r\n\r\nexport const stringToRgbObject = rgb => {\r\n    let colors = rgb.substring( rgb.indexOf(\"(\") + 1, rgb.length - 1 );\r\n    let color = colors.split(\",\");\r\n\r\n    if ( color.length < 3 ) {\r\n        throw new Error(\"Invalid RGB string.\");\r\n    }\r\n\r\n    return {\r\n        r: color[0],\r\n        g: color[1],\r\n        b: color[2],\r\n        a: color[3] ?? 1\r\n    }\r\n}\r\n\r\nexport const DEFAULT_SHADOW = {\r\n    inset: false,\r\n    offsetX: 0,\r\n    offsetY: 4,\r\n    blurRadius: 10,\r\n    spreadRadius: 4,\r\n    color: \"rgba(50,50,50,0.30)\",\r\n\r\n}","import React, { useRef, useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ChromePicker } from 'react-color';\r\nimport './../css/color-picker.css';\r\nimport { stringToRgbObject } from '../utils/shadow';\r\n\r\nconst ColorPicker = ({ label, handler, defaultColor }) => {\r\n    const formatted = useRef(defaultColor);\r\n    const [opened, setOpened] = useState(false);\r\n    const [color, setColor] = useState( {rgb: stringToRgbObject(defaultColor) });\r\n\r\n    useEffect( () => {\r\n        formatted.current = defaultColor;\r\n        setColor({rgb: stringToRgbObject(defaultColor)});\r\n    }, [defaultColor] );\r\n\r\n\r\n\r\n    const handleColor = color => {\r\n        formatted.current = formatColor(color.rgb);\r\n        handler(formatted.current );\r\n        setColor(color);       \r\n    };\r\n\r\n    const togglePicker = () => {\r\n        setOpened(!opened);\r\n    };\r\n\r\n    const formatColor = localColor => {\r\n        let formattedColor = \"rgba(\";\r\n        formattedColor += localColor.r + \", \" + localColor.g + \", \" + localColor.b + \", \" + localColor.a + \")\";\r\n        return formattedColor;\r\n    }\r\n\r\n    return (\r\n        <div className=\"input-field color-picker\">\r\n            <label onClick={togglePicker}>\r\n                {label}\r\n            </label>\r\n            <div className=\"color-preview\" style={{ backgroundColor: formatted.current }}\r\n                onClick={togglePicker}>\r\n\r\n            </div>\r\n\r\n            {opened &&\r\n                <div className=\"picker-popover\">\r\n                    <div className=\"picker-cover\" onClick={togglePicker} />\r\n                    <ChromePicker color={color.rgb}\r\n                        onChange={handleColor.bind(this)} />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nColorPicker.propTypes = {\r\n    /** A label to show for the color picker. Default: \"Color\" */\r\n    label: PropTypes.string,\r\n    /** A handler function to lift up the color state of the color picker. Required. */\r\n    handler: PropTypes.func.isRequired,\r\n    /** The default color to set the color picker to. */\r\n    defaultColor: PropTypes.string\r\n};\r\n\r\nColorPicker.defaultProps = {\r\n    label: \"Color\",\r\n    defaultColor: { r: 0, g: 0, b: 0, a: 1 }\r\n};\r\n\r\nexport default ColorPicker;","import React from 'react';\r\nimport Slider from './Slider';\r\nimport Toggle from './Toggle';\r\nimport './../css/sliders.css';\r\nimport ColorPicker from './ColorPicker';\r\nimport { stringToRgbObject } from './../utils/shadow';\r\n\r\n\r\nclass Sliders extends React.Component {\r\n\r\n    state = {\r\n        inset: false,\r\n        offsetX: 0,\r\n        offsetY: 0,\r\n        blurRadius: 0,\r\n        spreadRadius: 0,\r\n        color: \"rgba(0,0,0,0)\",\r\n        shadowIndex: 0,\r\n        boxColor: \"rgba(255, 255, 255, 1)\",\r\n        backgroundColor: \"rgba(240, 240, 240, 1)\",\r\n        boxSize: 100\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if ( prevProps.defaultShadow !== this.props.defaultShadow ){\r\n            this.setState({...this.props.defaultShadow});\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState( {...this.props.defaultShadow}, () => this._callHandlerProp() );\r\n    }\r\n\r\n    handler = (model, value) => {\r\n        this.setState({ [model]: value }, this._callHandlerProp);\r\n    }\r\n\r\n    handleColor = color => {\r\n        this.setState({ color: color }, this._callHandlerProp);\r\n    }\r\n\r\n    _callHandlerProp = () => {\r\n        this.props.onChangeValues( this.state );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"sliders\">\r\n                <Toggle label=\"Outset / Inset\"\r\n                    handler={this.handler.bind(this, \"inset\", !this.state.inset)}\r\n                    enabledText=\"Inset\"\r\n                    disabledText=\"Outset\" />\r\n                <Slider label=\"Horizontal Offset\" handler={this.handler.bind(this, \"offsetX\")} defaultValue={this.props.defaultShadow.offsetX}/>\r\n                <Slider label=\"Vertical Offset\" handler={this.handler.bind(this, \"offsetY\")} defaultValue={this.props.defaultShadow.offsetY}/>\r\n                <Slider label=\"Blur Radius\" handler={this.handler.bind(this, \"blurRadius\")} min={0} defaultValue={this.props.defaultShadow.blurRadius} />\r\n                <Slider label=\"Spread Radius\" handler={this.handler.bind(this, \"spreadRadius\")} defaultValue={this.props.defaultShadow.spreadRadius} />\r\n\r\n                <ColorPicker label=\"Shadow Color\" handler={this.handleColor.bind(this)}\r\n                defaultColor={this.props.defaultShadow.color}/>\r\n\r\n                <ColorPicker label=\"Box Color\" \r\n                handler={this.handler.bind(this, \"boxColor\")}\r\n                defaultColor={\"rgba(240,240,240,1)\"} />\r\n\r\n                <ColorPicker label=\"Background Color\" \r\n                handler={this.handler.bind(this, \"backgroundColor\")}\r\n                defaultColor={\"rgba(255,255,255,1)\"} />\r\n\r\n                <Slider label=\"Box Size\" \r\n                handler={this.handler.bind(this, \"boxSize\")} \r\n                min={5} \r\n                max={300} \r\n                defaultValue={300}/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Sliders;","import React from 'react';\r\nimport { getBoxShadowFromObject } from './../utils/shadow';\r\nimport './../css/box.css';\r\n\r\nconst Box = props => {\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"shadow-box-container\" style={{backgroundColor: props.backgroundColor}}>\r\n            <div className=\"shadow-box\" \r\n            style={\r\n                {\r\n                    boxShadow: getBoxShadowFromObject( props.boxShadows ), \r\n                    backgroundColor: props.boxColor,\r\n                    width: props.boxSize + \"px\",\r\n                    height: props.boxSize + \"px\"\r\n                }\r\n            }>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Box;","import React from 'react';\r\nimport { getBoxShadowFromObject } from './../utils/shadow';\r\nimport './../css/code.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faChevronUp } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst Code = props => {\r\n\r\n    return (\r\n        <div className=\"code\">\r\n            <FontAwesomeIcon icon={faChevronUp}/>\r\n            <code>\r\n                box-shadow: { getBoxShadowFromObject( props.shadows ) };\r\n            </code>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Code;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { getBoxShadowFromObject } from '../utils/shadow';\r\nimport './../css/shadow-layer.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ShadowLayer = props => {\r\n\r\n    return (\r\n        <div className={\"shadow-layer \" + (props.isActive && \"active\") } onClick={props.onClickLayer.bind(this, props.order)}>\r\n            <div className=\"shadow-preview\">\r\n                <div className=\"shadow-preview-box\" \r\n                style={{boxShadow: getBoxShadowFromObject( [props.shadow] )}}>\r\n                </div>\r\n                <div className=\"delete-layer-container\" onClick={props.onClickDelete.bind(this, props.order)}>\r\n                    <FontAwesomeIcon icon={faTimes}/>\r\n                </div>\r\n            </div>\r\n            <p>\r\n                Shadow #{props.order + 1}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nShadowLayer.propTypes = {\r\n    /** The order number of this item in the full list. */\r\n    order: PropTypes.number.isRequired,\r\n    /** The singular shadow object for this item. */\r\n    shadow: PropTypes.object.isRequired\r\n};\r\n\r\nexport default ShadowLayer;","import React from 'react';\r\nimport ShadowLayer from './ShadowLayer';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport './../css/shadow-list.css';\r\n\r\nconst ShadowList = props => {\r\n    return (\r\n        <div className=\"shadow-list\">\r\n            {\r\n                props.shadows.map( ( shadow, index ) => \r\n                    <ShadowLayer key={index} \r\n                    isActive={(props.current === index)} \r\n                    order={index} \r\n                    shadow={shadow}\r\n                    onClickLayer={(order) => props.onClickLayer(order)}\r\n                    onClickDelete={(order) => props.onClickDelete(order)}\r\n                    />\r\n                )\r\n            }\r\n            <div className=\"add-shadow\">\r\n                <FontAwesomeIcon className=\"plus-button\" onClick={ () => props.addShadowHandler() } icon={faPlus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ShadowList;","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport Content from './Content';\r\nimport Sliders from './Sliders';\r\nimport Box from './Box';\r\nimport Code from './Code';\r\nimport './../css/homescreen.css';\r\nimport ShadowList from './ShadowList';\r\nimport { DEFAULT_SHADOW } from './../utils/shadow';\r\n\r\nclass HomeScreen extends Component {\r\n\r\n    state = {\r\n        currentShadowIndex: 0,\r\n        boxShadows: [],\r\n        defaultSelection: DEFAULT_SHADOW,\r\n        backgroundColor: \"rgba(255, 255, 255, 1)\",\r\n        boxColor: \"rgba(240, 240, 240, 1)\",\r\n        boxSize: 100\r\n    }\r\n\r\n    verifyValidShadowIndex = () => {\r\n        if (this.state.boxShadows.length <= this.state.currentShadowIndex) {\r\n            let newIndex = this.state.boxShadows.length;\r\n\r\n            this.setState({\r\n                boxShadows: [...this.state.boxShadows, {}],\r\n                currentShadowIndex: newIndex\r\n            });\r\n        }\r\n    }\r\n\r\n    updateCurrentShadow = newShadow => {\r\n        let shadows = [...this.state.boxShadows];\r\n        let targetShadow = [shadows[this.state.currentShadowIndex]];\r\n        targetShadow = newShadow;\r\n        shadows[this.state.currentShadowIndex] = targetShadow;\r\n\r\n        return shadows;\r\n    }\r\n\r\n    handleShadowValues = values => {\r\n\r\n        this.verifyValidShadowIndex();\r\n\r\n        let shadow = {\r\n            inset: values.inset,\r\n            offsetX: values.offsetX,\r\n            offsetY: values.offsetY,\r\n            blurRadius: values.blurRadius,\r\n            spreadRadius: values.spreadRadius,\r\n            color: values.color\r\n        };\r\n\r\n        this.setState({\r\n            boxShadows: this.updateCurrentShadow(shadow),\r\n            backgroundColor: values.backgroundColor,\r\n            boxColor: values.boxColor,\r\n            boxSize: values.boxSize\r\n        });\r\n    }\r\n\r\n    handleAddShadow = () => {\r\n        let lastShadow = { ...this.state.boxShadows[this.state.currentShadowIndex] };\r\n        this.setState({\r\n            boxShadows: [...this.state.boxShadows, lastShadow],\r\n            currentShadowIndex: this.state.currentShadowIndex + 1\r\n        });\r\n\r\n    }\r\n\r\n    handleSelectLayer = (layerIndex) => {\r\n        this.setState({\r\n            currentShadowIndex: layerIndex,\r\n            defaultSelection: this.state.boxShadows[layerIndex]\r\n        });\r\n    }\r\n\r\n    handleDeleteLayer = (layerIndex) => {\r\n        if (this.state.boxShadows.length === 1) {\r\n            alert(\"You can't delete this layer.\");\r\n            return;\r\n        }\r\n\r\n        let shadows = [...this.state.boxShadows];\r\n        shadows.splice(layerIndex, 1);\r\n\r\n        let newIndex = (layerIndex === 0) ? layerIndex : layerIndex - 1;\r\n\r\n        this.setState({\r\n            boxShadows: shadows,\r\n            currentShadowIndex: newIndex,\r\n            defaultSelection: shadows[newIndex]\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"container\">\r\n                <Header />\r\n                <Content>\r\n                    <Sliders onChangeValues={this.handleShadowValues.bind(this)}\r\n                        defaultShadow={this.state.defaultSelection} />\r\n                    <Box backgroundColor={this.state.backgroundColor}\r\n                        boxColor={this.state.boxColor}\r\n                        boxShadows={this.state.boxShadows}\r\n                        boxSize={this.state.boxSize} />\r\n                    <ShadowList shadows={this.state.boxShadows}\r\n                        current={this.state.currentShadowIndex}\r\n                        addShadowHandler={this.handleAddShadow.bind(this)}\r\n                        onClickLayer={this.handleSelectLayer.bind(this)}\r\n                        onClickDelete={this.handleDeleteLayer.bind(this)} />\r\n                </Content>\r\n\r\n                <Code shadows={this.state.boxShadows} />\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default HomeScreen;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport HomeScreen from './components/HomeScreen';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomeScreen/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}