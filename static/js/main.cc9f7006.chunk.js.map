{"version":3,"sources":["logo.svg","components/Header.js","components/Content.js","components/Slider.js","components/Toggle.js","components/ColorPicker.js","utils/shadow.js","components/Sliders.js","components/Box.js","components/Code.js","components/ShadowLayer.js","components/ShadowList.js","components/HomeScreen.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","props","className","Content","children","Slider","min","max","defaultValue","handler","label","uniqueId","useRef","uniqid","current","useState","currentValue","setCurrentValue","useEffect","handleChange","event","stopPropagation","updateValue","target","value","newValue","numberValue","parseInt","htmlFor","type","id","onChange","defaultProps","Toggle","state","toggled","setState","this","disabledText","checked","enabledText","React","Component","ColorPicker","defaultColor","formatted","r","g","b","a","opened","setOpened","rgb","color","setColor","formatColor","togglePicker","formattedColor","onClick","style","backgroundColor","bind","getBoxShadowFromObject","shadows","boxShadow","forEach","shadow","index","inset","offsetX","offsetY","blurRadius","spreadRadius","length","stringToRgbObject","substring","indexOf","split","Error","DEFAULT_SHADOW","Sliders","shadowIndex","boxColor","boxSize","model","_callHandlerProp","handleColor","onChangeValues","prevProps","defaultShadow","Box","boxShadows","width","height","Code","ShadowLayer","isActive","onClickLayer","order","onClickDelete","icon","faTimes","ShadowList","map","key","addShadowHandler","faPlus","HomeScreen","currentShadowIndex","defaultSelection","verifyValidShadowIndex","newIndex","updateCurrentShadow","newShadow","targetShadow","handleShadowValues","values","handleAddShadow","lastShadow","handleSelectLayer","layerIndex","handleDeleteLayer","splice","alert","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.cc9f7006.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react';\r\nimport './../css/header.css';\r\n\r\nconst Header = props => {\r\n    return (\r\n        <header>\r\n            <h1>\r\n                <span className=\"box\">Box</span> Shadow Generator\r\n            </h1>\r\n        </header>\r\n    )\r\n};\r\n\r\nexport default Header;","import React from 'react';\r\nimport './../css/content.css';\r\n\r\nconst Content = props => {\r\n    \r\n    return (\r\n        <div className=\"content\">\r\n            {props.children}\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default Content;","import React, { useRef, useEffect, useState } from 'react';\r\nimport uniqid from 'uniqid';\r\nimport './../css/slider.css';\r\nimport PropTypes from 'prop-types';\r\n\r\nconst Slider = ( {min, max, defaultValue, handler, label} ) => {\r\n    const uniqueId = useRef(uniqid()).current;\r\n    const [currentValue, setCurrentValue] = useState(defaultValue);\r\n\r\n    useEffect( () => {\r\n        setCurrentValue( defaultValue );\r\n    }, [defaultValue]);\r\n\r\n    const handleChange = event => {\r\n        event.stopPropagation();\r\n        \r\n        updateValue( event.target.value );\r\n    }\r\n\r\n    const updateValue = newValue => {\r\n        let numberValue = parseInt( newValue );\r\n        setCurrentValue( numberValue );\r\n        handler( numberValue );\r\n    }\r\n\r\n    return (\r\n        <div className=\"input-field slider\">\r\n            <div className=\"user-information\">\r\n                <label htmlFor={uniqueId}>\r\n                    {label}\r\n                </label>\r\n\r\n                <input type=\"number\"\r\n                    id={uniqueId}\r\n                    value={currentValue}\r\n                    onChange={event => handleChange(event)} />\r\n            </div>\r\n\r\n            <input type=\"range\"\r\n                min={min}\r\n                max={max}\r\n                value={currentValue}\r\n                onChange={event => handleChange(event)} />\r\n        </div>\r\n    )\r\n}\r\n\r\nSlider.propTypes = {\r\n    /** The minimum value. Default: -100 */\r\n    min: PropTypes.number,\r\n    /** The maximum value. Default: 100 */\r\n    max: PropTypes.number,\r\n    /** The default value. Default: 0 */\r\n    defaultValue: PropTypes.number,\r\n    /** A function that handles the slider value. */\r\n    handler: PropTypes.func,\r\n    /** A label to shortly describe the slider. Default: \"Slider\" */\r\n    label: PropTypes.string\r\n}\r\n\r\nSlider.defaultProps = {\r\n    min: -100,\r\n    max: 100,\r\n    defaultValue: 0,\r\n    label: \"Slider\"\r\n}\r\n\r\nexport default Slider;","import React from 'react';\r\nimport uniqid from 'uniqid';\r\nimport PropTypes from 'prop-types';\r\nimport './../css/toggle.css';\r\n\r\nclass Toggle extends React.Component {\r\n\r\n    constructor() {\r\n        super();\r\n        this.uniqueId = uniqid();\r\n    }\r\n\r\n    static propTypes = {\r\n        /** A label to shortly described what is being toggled. Default: \"Toggle\" */\r\n        label: PropTypes.string,\r\n        /** Text to appear on the off/disabled side of the toggle. Default: null */\r\n        disabledText: PropTypes.string,\r\n        /** Text to appear on the on/enabled side of the toggle. Default: null */\r\n        enabledText: PropTypes.string,\r\n        /** A function to handle the changes in value of the toggle. */\r\n        handler: PropTypes.func\r\n    };\r\n\r\n    static defaultProps = {\r\n        label: \"Toggle\"\r\n    };\r\n\r\n    state = {\r\n        toggled: false\r\n    };\r\n\r\n    handleChange = () => {\r\n        this.setState({ toggled: !this.state.toggled });\r\n        this.props.handler( );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"input-field toggle\">\r\n                <label htmlFor={this.uniqueId}>\r\n                    {this.props.label}\r\n                </label>\r\n                {\r\n                    this.props.disabledText &&\r\n                    <p>\r\n                        {this.props.disabledText}\r\n                    </p>\r\n                }\r\n                <input type=\"checkbox\"\r\n                    checked={this.state.toggled}\r\n                    onChange={ this.handleChange }\r\n                    id={this.uniqueId} />\r\n                {\r\n                    this.props.enabledText &&\r\n                    <p>\r\n                        {this.props.enabledText}\r\n                    </p>\r\n                }\r\n            </div>\r\n        );\r\n    }\r\n};\r\n\r\nexport default Toggle;","import React, { useRef, useState, useEffect } from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { ChromePicker } from 'react-color';\r\nimport './../css/color-picker.css';\r\n\r\nconst ColorPicker = ({ label, handler, defaultColor }) => {\r\n    const formatted = useRef(\"rgba(\" + defaultColor.r + \", \" + defaultColor.g + \", \" + defaultColor.b + \", \" + defaultColor.a + \")\");\r\n    const [opened, setOpened] = useState(false);\r\n    const [color, setColor] = useState( {rgb: defaultColor });\r\n    \r\n    useEffect( () => {\r\n        formatted.current = formatColor(defaultColor);\r\n        setColor( defaultColor );\r\n    }, [defaultColor] );\r\n\r\n    const handleColor = color => {\r\n        formatted.current = formatColor(color.rgb);\r\n        setColor(color.rgb);\r\n        handler(formatted.current );\r\n    };\r\n\r\n    const togglePicker = () => {\r\n        setOpened(!opened);\r\n    };\r\n\r\n    const formatColor = color => {\r\n        let formattedColor = \"rgba(\";\r\n        formattedColor += color.r + \", \" + color.g + \", \" + color.b + \", \" + color.a + \")\";\r\n        return formattedColor;\r\n    }\r\n\r\n    return (\r\n        <div className=\"input-field color-picker\">\r\n            <label onClick={togglePicker}>\r\n                {label}\r\n            </label>\r\n            <div className=\"color-preview\" style={{ backgroundColor: formatted.current }}\r\n                onClick={togglePicker}>\r\n\r\n            </div>\r\n\r\n            {opened &&\r\n                <div className=\"picker-popover\">\r\n                    <div className=\"picker-cover\" onClick={togglePicker} />\r\n                    <ChromePicker color={color}\r\n                        onChange={handleColor.bind(this)} />\r\n                </div>\r\n            }\r\n        </div>\r\n    );\r\n}\r\n\r\nColorPicker.propTypes = {\r\n    /** A label to show for the color picker. Default: \"Color\" */\r\n    label: PropTypes.string,\r\n    /** A handler function to lift up the color state of the color picker. Required. */\r\n    handler: PropTypes.func.isRequired,\r\n    /** The default color to set the color picker to. */\r\n    defaultColor: PropTypes.object\r\n};\r\n\r\nColorPicker.defaultProps = {\r\n    label: \"Color\",\r\n    defaultColor: { r: 0, g: 0, b: 0, a: 1 }\r\n};\r\n\r\nexport default ColorPicker;","export const getBoxShadowFromObject = shadows => {\r\n    let boxShadow = \"\";\r\n\r\n    shadows.forEach( ( shadow, index ) => {\r\n        boxShadow += ( shadow.inset ) ? \"inset \" : \"\";\r\n        boxShadow += shadow.offsetX + \"px \";\r\n        boxShadow += shadow.offsetY + \"px \";\r\n        boxShadow += shadow.blurRadius + \"px \";\r\n        boxShadow += shadow.spreadRadius + \"px \";\r\n        boxShadow += shadow.color;\r\n        boxShadow += ( index + 1 < shadows.length ) ? \",\" : \"\"\r\n    } );\r\n\r\n    return boxShadow;\r\n}\r\n\r\nexport const stringToRgbObject = rgb => {\r\n    let colors = rgb.substring( rgb.indexOf(\"(\") + 1, rgb.length - 1 );\r\n    let color = colors.split(\",\");\r\n\r\n    if ( color.length < 3 ) {\r\n        throw new Error(\"Invalid RGB string.\");\r\n    }\r\n\r\n    return {\r\n        r: color[0],\r\n        g: color[1],\r\n        b: color[2],\r\n        a: color[3] ?? 1\r\n    }\r\n}\r\n\r\nexport const DEFAULT_SHADOW = {\r\n    inset: false,\r\n    offsetX: 0,\r\n    offsetY: 4,\r\n    blurRadius: 10,\r\n    spreadRadius: 4,\r\n    color: \"rgba(50,50,50,0.30)\",\r\n\r\n}","import React from 'react';\r\nimport Slider from './Slider';\r\nimport Toggle from './Toggle';\r\nimport './../css/sliders.css';\r\nimport ColorPicker from './ColorPicker';\r\nimport { stringToRgbObject } from './../utils/shadow';\r\n\r\n\r\nclass Sliders extends React.Component {\r\n\r\n    state = {\r\n        inset: false,\r\n        offsetX: 0,\r\n        offsetY: 0,\r\n        blurRadius: 0,\r\n        spreadRadius: 0,\r\n        color: \"rgba(0,0,0,0)\",\r\n        shadowIndex: 0,\r\n        boxColor: \"rgba(255, 255, 255, 1)\",\r\n        backgroundColor: \"rgba(240, 240, 240, 1)\",\r\n        boxSize: 100\r\n    }\r\n\r\n    componentDidUpdate(prevProps) {\r\n        if ( prevProps.defaultShadow !== this.props.defaultShadow ){\r\n            this.setState({...this.props.defaultShadow});\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.setState( {...this.props.defaultShadow}, () => this._callHandlerProp() );\r\n    }\r\n\r\n    handler = (model, value) => {\r\n        this.setState({ [model]: value }, this._callHandlerProp);\r\n    }\r\n\r\n    handleColor = color => {\r\n        this.setState({ color: color }, this._callHandlerProp);\r\n    }\r\n\r\n    _callHandlerProp = () => {\r\n        this.props.onChangeValues( this.state );\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div className=\"sliders\">\r\n                <Toggle label=\"Outset / Inset\"\r\n                    handler={this.handler.bind(this, \"inset\", !this.state.inset)}\r\n                    enabledText=\"Inset\"\r\n                    disabledText=\"Outset\" />\r\n                <Slider label=\"Horizontal Offset\" handler={this.handler.bind(this, \"offsetX\")} defaultValue={this.props.defaultShadow.offsetX}/>\r\n                <Slider label=\"Vertical Offset\" handler={this.handler.bind(this, \"offsetY\")} defaultValue={this.props.defaultShadow.offsetY}/>\r\n                <Slider label=\"Blur Radius\" handler={this.handler.bind(this, \"blurRadius\")} min={0} defaultValue={this.props.defaultShadow.blurRadius} />\r\n                <Slider label=\"Spread Radius\" handler={this.handler.bind(this, \"spreadRadius\")} defaultValue={this.props.defaultShadow.spreadRadius} />\r\n\r\n                <ColorPicker label=\"Shadow Color\" handler={this.handleColor.bind(this)}\r\n                defaultColor={stringToRgbObject( this.props.defaultShadow.color )}/>\r\n\r\n                <ColorPicker label=\"Box Color\" \r\n                handler={this.handler.bind(this, \"boxColor\")}\r\n                defaultColor={ {r: 240, g: 240, b: 240, a: 1} } />\r\n\r\n                <ColorPicker label=\"Background Color\" \r\n                handler={this.handler.bind(this, \"backgroundColor\")}\r\n                defaultColor={ {r: 255, g: 255, b: 255, a: 1} } />\r\n\r\n                <Slider label=\"Box Size\" \r\n                handler={this.handler.bind(this, \"boxSize\")} \r\n                min={5} \r\n                max={300} \r\n                defaultValue={300}/>\r\n\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default Sliders;","import React from 'react';\r\nimport { getBoxShadowFromObject } from './../utils/shadow';\r\nimport './../css/box.css';\r\n\r\nconst Box = props => {\r\n\r\n\r\n\r\n    return(\r\n        <div className=\"shadow-box-container\" style={{backgroundColor: props.backgroundColor}}>\r\n            <div className=\"shadow-box\" \r\n            style={\r\n                {\r\n                    boxShadow: getBoxShadowFromObject( props.boxShadows ), \r\n                    backgroundColor: props.boxColor,\r\n                    width: props.boxSize + \"px\",\r\n                    height: props.boxSize + \"px\"\r\n                }\r\n            }>\r\n                \r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Box;","import React from 'react';\r\nimport { getBoxShadowFromObject } from './../utils/shadow';\r\n\r\nconst Code = props => {\r\n\r\n    return (\r\n        <div className=\"code\">\r\n            <code>\r\n                box-shadow: { getBoxShadowFromObject( props.shadows ) };\r\n            </code>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Code;","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { getBoxShadowFromObject } from '../utils/shadow';\r\nimport './../css/shadow-layer.css';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faTimes } from '@fortawesome/free-solid-svg-icons';\r\n\r\nconst ShadowLayer = props => {\r\n\r\n    return (\r\n        <div className={\"shadow-layer \" + (props.isActive && \"active\") } onClick={props.onClickLayer.bind(this, props.order)}>\r\n            <div className=\"shadow-preview\">\r\n                <div className=\"shadow-preview-box\" \r\n                style={{boxShadow: getBoxShadowFromObject( [props.shadow] )}}>\r\n                </div>\r\n                <div className=\"delete-layer-container\" onClick={props.onClickDelete.bind(this, props.order)}>\r\n                    <FontAwesomeIcon icon={faTimes}/>\r\n                </div>\r\n            </div>\r\n            <p>\r\n                Shadow #{props.order + 1}\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n\r\nShadowLayer.propTypes = {\r\n    /** The order number of this item in the full list. */\r\n    order: PropTypes.number.isRequired,\r\n    /** The singular shadow object for this item. */\r\n    shadow: PropTypes.object.isRequired\r\n};\r\n\r\nexport default ShadowLayer;","import React from 'react';\r\nimport ShadowLayer from './ShadowLayer';\r\nimport { FontAwesomeIcon } from '@fortawesome/react-fontawesome';\r\nimport { faPlus } from '@fortawesome/free-solid-svg-icons';\r\nimport './../css/shadow-list.css';\r\n\r\nconst ShadowList = props => {\r\n    return (\r\n        <div className=\"shadow-list\">\r\n            {\r\n                props.shadows.map( ( shadow, index ) => \r\n                    <ShadowLayer key={index} \r\n                    isActive={(props.current === index)} \r\n                    order={index} \r\n                    shadow={shadow}\r\n                    onClickLayer={(order) => props.onClickLayer(order)}\r\n                    onClickDelete={(order) => props.onClickDelete(order)}\r\n                    />\r\n                )\r\n            }\r\n            <div className=\"add-shadow\">\r\n                <FontAwesomeIcon className=\"plus-button\" onClick={ () => props.addShadowHandler() } icon={faPlus}/>\r\n            </div>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default ShadowList;","import React, { Component } from 'react';\r\nimport Header from './Header';\r\nimport Content from './Content';\r\nimport Sliders from './Sliders';\r\nimport Box from './Box';\r\nimport Code from './Code';\r\nimport './../css/homescreen.css';\r\nimport ShadowList from './ShadowList';\r\nimport { DEFAULT_SHADOW } from './../utils/shadow';\r\n\r\nclass HomeScreen extends Component {\r\n\r\n    state = {\r\n        currentShadowIndex: 0,\r\n        boxShadows: [],\r\n        defaultSelection: DEFAULT_SHADOW,\r\n        backgroundColor: \"rgba(255, 255, 255, 1)\",\r\n        boxColor: \"rgba(240, 240, 240, 1)\",\r\n        boxSize: 100\r\n    }\r\n\r\n    verifyValidShadowIndex = () => {\r\n        if ( this.state.boxShadows.length <= this.state.currentShadowIndex ) {\r\n            let newIndex = this.state.boxShadows.length;\r\n            \r\n            this.setState( {\r\n                boxShadows: [...this.state.boxShadows, {}],\r\n                currentShadowIndex: newIndex\r\n            } );\r\n        }\r\n    }\r\n\r\n    updateCurrentShadow = newShadow => {\r\n        let shadows = [...this.state.boxShadows];\r\n        let targetShadow = [shadows[ this.state.currentShadowIndex ]];\r\n        targetShadow = newShadow;\r\n        shadows[ this.state.currentShadowIndex ] = targetShadow;\r\n\r\n        return shadows;\r\n    }\r\n\r\n    handleShadowValues = values => {\r\n\r\n        this.verifyValidShadowIndex();\r\n\r\n        let shadow = {\r\n            inset: values.inset,\r\n            offsetX: values.offsetX,\r\n            offsetY: values.offsetY,\r\n            blurRadius: values.blurRadius,\r\n            spreadRadius: values.spreadRadius,\r\n            color: values.color\r\n        };\r\n\r\n        this.setState({\r\n            boxShadows: this.updateCurrentShadow( shadow ), \r\n            backgroundColor: values.backgroundColor, \r\n            boxColor: values.boxColor,\r\n            boxSize: values.boxSize\r\n        });\r\n    }\r\n\r\n    handleAddShadow = () => {\r\n        let lastShadow = { ...this.state.boxShadows[this.state.currentShadowIndex]};\r\n        this.setState( { \r\n            boxShadows: [...this.state.boxShadows, lastShadow ],\r\n            currentShadowIndex: this.state.currentShadowIndex+1\r\n        } );\r\n\r\n    }\r\n\r\n    handleSelectLayer = ( layerIndex ) => {\r\n        this.setState({\r\n            currentShadowIndex: layerIndex,\r\n            defaultSelection: this.state.boxShadows[layerIndex]\r\n        });\r\n    }\r\n\r\n    handleDeleteLayer = ( layerIndex ) => {\r\n        if ( this.state.boxShadows.length === 1 ) {\r\n            alert(\"You can't delete this layer.\");\r\n            return;\r\n        }\r\n\r\n        let shadows = [...this.state.boxShadows];\r\n        shadows.splice( layerIndex, 1 );\r\n\r\n        let newIndex = ( layerIndex === 0 ) ? layerIndex : layerIndex - 1;\r\n\r\n        this.setState({\r\n            boxShadows: shadows,\r\n            currentShadowIndex: newIndex,\r\n            defaultSelection: shadows[newIndex]\r\n        });\r\n    }\r\n\r\n    render() {\r\n        return(\r\n            <div className=\"container\">\r\n                <Header/>\r\n                <Content>\r\n                    <Sliders onChangeValues={this.handleShadowValues.bind(this)}\r\n                    defaultShadow={this.state.defaultSelection} />\r\n                    <Box backgroundColor={this.state.backgroundColor} \r\n                    boxColor={this.state.boxColor} \r\n                    boxShadows={this.state.boxShadows}\r\n                    boxSize={this.state.boxSize}/>\r\n                    <ShadowList shadows={this.state.boxShadows}\r\n                    current={this.state.currentShadowIndex}\r\n                    addShadowHandler={this.handleAddShadow.bind(this)}\r\n                    onClickLayer={this.handleSelectLayer.bind(this)}\r\n                    onClickDelete={this.handleDeleteLayer.bind(this)}/>\r\n                </Content>\r\n\r\n                \r\n                <Code shadows={this.state.boxShadows}/>\r\n            </div>\r\n        )\r\n    }\r\n};\r\n\r\nexport default HomeScreen;","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport HomeScreen from './components/HomeScreen';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <HomeScreen/>\n    </div>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}